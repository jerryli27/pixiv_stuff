"""
This file is mainly for preprocessing sketch-colored image pairs. It assumes that i have already a list of cleaned
pairs and outputs a list of file names of the cleaned files that can be used by other programs.
"""


import os
import argparse
from general_util import get_all_image_paths_in_dir, imread, imsave

def find(d):
    result = []
    num_illegal_lines = 0
    with open(d, 'r') as f:
        for line in f.readlines():
            line_splitted = line.split("\t")
            if len(line_splitted) == 4:
                result.append((line_splitted[1], line_splitted[3].strip()))
            else:
                num_illegal_lines += 1
    assert num_illegal_lines < len(result)
    result.sort()
    return result

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--input_path", required=True, help="path to folder containing images")
    parser.add_argument("--sketch_color_list_path", required=True,
                        help="path to the sketch_colored_list.txt file generated by the modified PixivUtil program.")
    parser.add_argument("--output_path", required=True, help="path to create a list of cleaned images.")
    # parser.add_argument("--output_path", default = "sketch_colored_cleaned", help="output path")
    a = parser.parse_args()

    all_image_paths = get_all_image_paths_in_dir(a.input_path)
    input_path_len = len(a.input_path)
    all_image_basenames = set([os.path.splitext(os.path.basename(path))[0]  for path in all_image_paths])
    # print(len(all_image_basenames))

    num_lines_written = 0
    with open(a.output_path, "w") as f_out, open(a.sketch_color_list_path, 'r') as f_in:
        for line in f_in.readlines():
            line_splitted = line.split("\t")
            if len(line_splitted) == 4:
                src_basename = os.path.splitext(os.path.basename(line_splitted[1]))[0]
                if src_basename in all_image_basenames:
                    f_out.write(line)
                    num_lines_written += 1
    # print(num_lines_written)
    # assert num_lines_written == len(all_image_basenames)

